import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.time.format.DateTimeFormatter;

public class App {
    private double balance;
    private double savings;
    private double loan;
    private List<Transaction> transactionHistory;

    public App() {
        this.balance = 0.0;
        this.savings = 0.0;
        this.loan = 0.0;
        this.transactionHistory = new ArrayList<>();
        loadTransactionHistory(); // Load previous transactions
    }




    public static void main(String[] args) throws Exception {
        App manager = new App();
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            manager.displayMenu();
            choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1 -> manager.debit(scanner);
                case 2 -> manager.credit(scanner);
                case 3 -> manager.viewTransactionHistory();
                case 4 -> manager.displayBalance();
                case 5 -> manager.manageSavings(scanner);
                case 6 -> manager.predictInterest(scanner);
                case 7 -> System.out.println("Logging out. Goodbye!");
                default -> System.out.println("Invalid choice! Please try again.");
            }
        } while (choice != 7);

        scanner.close();
       
    }
     private void displayMenu() {
        System.out.println("\n== Welcome, User ==");
        System.out.printf("Balance: %.2f\nSavings: %.2f\nLoan: %.2f\n", balance, savings, loan);
        System.out.println("\n== Transaction ==");
        System.out.println("1. Debit");
        System.out.println("2. Credit");
        System.out.println("3. History");
        System.out.println("4. Balance");
        System.out.println("5. Savings");
        System.out.println("6. Deposit Interest Predictor");
        System.out.println("7. Logout");
        System.out.print("Enter your choice: ");
    }

    private void debit(Scanner scanner) {
        System.out.print("Enter the amount to debit: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume newline

        if (amount > balance) {
            System.out.println("Insufficient balance!");
            return;
        }

        balance -= amount;
        addTransaction("Debit", amount, 0.0);
        System.out.println("Debit successful!");
    }

    private void credit(Scanner scanner) {
        System.out.print("Enter the amount to credit: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume newline

        balance += amount;
        addTransaction("Credit", 0.0, amount);
        System.out.println("Credit successful!");
    }

    private void viewTransactionHistory() {
        System.out.println("\n== Transaction History ==");
        System.out.printf("%-15s %-20s %-10s %-10s %-10s\n", "Date", "Description", "Debit", "Credit", "Balance");

        for (Transaction t : transactionHistory) {
            System.out.printf("%-15s %-20s %-10.2f %-10.2f %-10.2f\n", t.getDate(), t.getDescription(),
                    t.getDebit(), t.getCredit(), t.getBalance());
        }

        exportHistoryToCSV();
    }

    private void displayBalance() {
        System.out.printf("Current Balance: %.2f\n", balance);
    }

    private void addTransaction(String description, double debit, double credit) {
        String date=LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        Transaction transaction = new Transaction(date, description, debit, credit, balance);
        transactionHistory.add(transaction);
        saveTransactionHistory();
    }

    private void saveTransactionHistory() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("transactions.dat"))) {
            oos.writeObject(transactionHistory);
        } catch (IOException e) {
            System.out.println("Error saving transaction history: " + e.getMessage());
        }
    }

    @SuppressWarnings("unchecked")
    private void loadTransactionHistory() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("transactions.dat"))) {
            transactionHistory = (List<Transaction>) ois.readObject();
            if (!transactionHistory.isEmpty()) {
                balance = transactionHistory.get(transactionHistory.size() - 1).getBalance();
            }
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("No previous transaction history found.");
        }
    }

    private void exportHistoryToCSV() {
        try (PrintWriter writer = new PrintWriter(new File("transaction_history.csv"))) {
            writer.println("Date,Description,Debit,Credit,Balance");
            for (Transaction t : transactionHistory) {
                writer.printf("%s,%s,%.2f,%.2f,%.2f\n", t.getDate(), t.getDescription(), t.getDebit(),
                        t.getCredit(), t.getBalance());
            }
            System.out.println("Transaction history exported to 'transaction_history.csv'.");
        } catch (FileNotFoundException e) {
            System.out.println("Error exporting transaction history: " + e.getMessage());
        }
    }
    private void manageSavings(Scanner scanner) {
        System.out.println("Savings management not implement yet.");
    }
    private void predictInterest(Scanner scanner) {
        System.out.println("Interest prediction not implemented yet.");
    }
}

class Transaction implements Serializable {
    private static final long serialVersionUID = 1L;
    private final String date;
    private final String description;
    private final double debit;
    private final double credit;
    private final double balance;

    public Transaction(String date, String description, double debit, double credit, double balance) {
        this.date = date;
        this.description = description;
        this.debit = debit;
        this.credit = credit;
        this.balance = balance;
    }

    public String getDate() {
        return date;
    }

    public String getDescription() {
        return description;
    }

    public double getDebit() {
        return debit;
    }

    public double getCredit() {
        return credit;
    }

    public double getBalance() {
        return balance;
    }
}
